# def file_csv(l:list[str], path:str)-> bool:
#     try:
#         path.strip("/")
#         f = open(f"tmp/file_{path}.csv", "w")
#         f.write("Files\n")
#         for file in l:
#             f.write(file + "\n")
#         f.close()
#         return True
#     except Exception as e:
#         print("Error creating file" + e)
#         return False
    
# def display_graph(graph:nx.Graph|nx.DiGraph):
#     print("Displaying graph")
#     nx.draw(graph, with_labels=True, font_weight='bold')
#     plt.show()

# def create_graph(files:list[str]):
#     # Create a graph based on the files in the project
#     G = nx.DiGraph()
#     for file in files:
#         G.add_node(file)
#     return G

# # extracting a module name from a file name
# def module_name_from_file_path(full_path):
#     # e.g. ../core/model/user.py -> zeeguu.core.model.user

#     file_name = full_path[len(CODE_ROOT_FOLDER):]
#     file_name = file_name.replace("/__init__.py","")
#     file_name = file_name.replace("/",".")
#     file_name = file_name.replace(".py","")
#     return file_name

# def dependencies_graph(code_root_folder):
#     files = Path(code_root_folder).rglob("*.py")

#     G = nx.Graph()

#     for file in files:
#         file_path = str(file)

#         module_name = module_name_from_file_path(file_path)

#         if module_name not in G.nodes:
#             G.add_node(module_name)

#         for imp in imports_from_file(file_path):
#             G.add_edge(module_name, imp)

#     return G

# def imports_from_file(file):

#     all_imports = []

#     lines = [line for line in open(file)]

#     for line in lines:
#         imp = import_from_line(line)

#         if imp:
#             all_imports.append(imp)

#     return all_imports

# def import_from_line(line):

#     # regex patterns used
#     #   ^  - beginning of line
#     #   \S - anything that is not space
#     #   +  - at least one occurrence of previous
#     #  ( ) - capture group (read more at: https://pynative.com/python-regex-capturing-groups/)
#     try:
#       y = re.search("^from (\S+)", line)
#       if not y:
#         y = re.search("^import (\S+)", line)
#       return y.group(1)
#     except:
#       return None

# # def create_graph(files:list, flag:str="f"):
# #     """
# #     Builds a graph from a list of files. The type of graph is dictated by the flag.
# #     Args:
# #         files (list): List of files to create a graph from.
# #         flag (str): Flag to determine the type of graph to create.
# #     Returns:
# #         nx.Graph: A networkx graph object.
# #     """
# #     if flag == "f":
# #         return cg.create_graph_files(files)
# #     elif flag == "c":
# #         return cg.create_graph_directories(files)
# #     elif flag == "i":
# #         return cg.create_graph_all(files)
# #     elif flag == "g":
# #         return cg.create_graph_directories(files)
# #     else:
# #         print("Invalid flag. Please provide a valid flag.")
# #         return None
